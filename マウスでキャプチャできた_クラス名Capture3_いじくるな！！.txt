import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JRootPane;

public class Capture3 extends JFrame implements ComponentListener, MouseListener{
	private Robot robot;
	private int width;
	private int height;
	private JFrame frame;
	private BufferedImage image;
	
	public void init() {
		
	}
	public Capture3()
	{
		
		try {
            robot = new Robot();		//ロボット使えるようにする
        } catch (AWTException ex) {
            ex.printStackTrace();
            return;
        }
		
		addComponentListener(this);//ウィンドウ移動イベント追加
        addMouseListener(this);	//マウスイベント追加
        // 範囲を指定してキャプチャ
        Rectangle bounds = new Rectangle(100, 100, 400, 400);	//ウィンドウの初期状態

        setBounds(bounds);		//サイズを指定（ここでは初期状態のやつ↑）
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		//×ボタンをつける
        
        setRootPane(new ImageRootPane());

        JComponent content = (JComponent)getContentPane();
        content.setOpaque(false);		//パネルの背景透明・非透明
 
        //JLabel label = new JLabel(new ImageIcon(image));
        //getContentPane().add(label);
 
        setVisible(true); //initで一度初期状態を見せる
	}
	
	/////////////ウィンドウのイベント
	@Override
	public void componentResized(ComponentEvent e) {	//	ウィンドウのサイズが変わったら
		//setVisible(false);
		// TODO 自動生成されたメソッド・スタブ
		
	}

	@Override
	public void componentMoved(ComponentEvent e) {		//	ウィンドウが移動したら
		// TODO 自動生成されたメソッド・スタブ
		System.out.println("Rush");
		
	}

	@Override
	public void componentShown(ComponentEvent e) {		//	ウィンドウが表示されたら
		// TODO 自動生成されたメソッド・スタブ
		
	}

	@Override
	public void componentHidden(ComponentEvent e) {		//	ウィンドウがかくれたら
		// TODO 自動生成されたメソッド・スタブ
		
	}
	
	////////////マウス
	@Override
	public void mouseClicked(MouseEvent e) {			//	クリックされたら
		// TODO 自動生成されたメソッド・スタブ
		
	}
	@Override
	public void mousePressed(MouseEvent e) {			//	押され続けてたら
		// TODO 自動生成されたメソッド・スタブ
		
	}
	@Override
	public void mouseReleased(MouseEvent e) {			//	マウスを離したら
		// TODO 自動生成されたメソッド・スタブ
		setVisible(false);	//最初にフレームとかを隠すようにした
		
		Rectangle bounds = getBounds();		//	四角で範囲指定するために必要なやつ
        Insets insets = getInsets();		//	フレーム内のサイズ？
        
//        Dimension size = getSize();			いらない
//        width = size.width;
//        height = size.height;
        
        bounds = new Rectangle(bounds.x + insets.left,
				bounds.y + insets.top,
				bounds.width - insets.left - insets.right,
				bounds.height - insets.top - insets.bottom);	//フレーム内の範囲

        image = robot.createScreenCapture(bounds);	//範囲指定したやつをrobotでスクショ

        //JLabel label = new JLabel(new ImageIcon(image));	//イメージをラベルに入れる　いらない
        //getContentPane().add(label);	※addだと前のやつが残る
 
        setVisible(true);	//隠したウィンドウを元に戻す
	}
	@Override
	public void mouseEntered(MouseEvent e) {			//	マウスがコンポネートに入ったら
		// TODO 自動生成されたメソッド・スタブ
		
	}
	@Override
	public void mouseExited(MouseEvent e) {				//	マウスがコンポネートからでたら
		// TODO 自動生成されたメソッド・スタブ
		
	}
	///
	//救世主↓ imageの描画?
	///
	class ImageRootPane extends JRootPane {
        public void paintComponent(Graphics g) {
            g.drawImage(image, 0, 0, this);
        }
    }

	public static void main(String[] args) {
	 	new Capture3();
	 }
	

}
